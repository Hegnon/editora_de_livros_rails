require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/livros", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Livro. As you add validations to Livro, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    autor = Autor.create(nome: "name", cpf: "12463278722")
    { titulo: "abc", isbn: "9788533302273", autor_id: autor.id }
  }

  let(:new_attributes) {
    { titulo: "Updated titulo", isbn: "9788533302273" }
  }

  let(:invalid_attributes) {
    { titulo: "", isbn: "00955654" }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Livro.create! valid_attributes
      get livros_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      livro = Livro.create! valid_attributes
      get livro_url(livro)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_livro_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      livro = Livro.create! valid_attributes
      get edit_livro_url(livro)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Livro" do
        expect {
          post livros_url, params: { livro: valid_attributes }
        }.to change(Livro, :count).by(1)
      end

      it "redirects to the created livro" do
        post livros_url, params: { livro: valid_attributes }
        expect(response).to redirect_to(livro_url(Livro.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Livro" do
        expect {
          post livros_url, params: { livro: invalid_attributes }
        }.to change(Livro, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post livros_url, params: { livro: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { titulo: "Updated titulo", isbn: "9788533302273" }
      }

      it "updates the requested livro" do
        livro = Livro.create! valid_attributes
        patch livro_url(livro), params: { livro: new_attributes }
        livro.reload
        expect(livro.titulo).to eq(new_attributes[:titulo])
        expect(livro.isbn).to eq(new_attributes[:isbn])
      end

      it "redirects to the livro" do
        livro = Livro.create! valid_attributes
        patch livro_url(livro), params: { livro: new_attributes }
        livro.reload
        expect(response).to redirect_to(livro_url(livro))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        livro = Livro.create! valid_attributes
        patch livro_url(livro), params: { livro: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested livro" do
      livro = Livro.create! valid_attributes
      expect {
        delete livro_url(livro)
      }.to change(Livro, :count).by(-1)
    end

    it "redirects to the livros list" do
      livro = Livro.create! valid_attributes
      delete livro_url(livro)
      expect(response).to redirect_to(livros_url)
    end
  end
end
